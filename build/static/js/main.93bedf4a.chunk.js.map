{"version":3,"sources":["ramka.png","components/FileDisplay/FileDisplay.js","view/InsertIntoPDFView.js","helpers/asyncForEach.js","view/PDFMergeView.js","components/Nav/Nav.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","FileDisplay","props","ramkaBlob","Blob","bytes","type","ramkaBlobUrl","URL","createObjectURL","src","InsertIntoPDFView","fileReader","useState","fileContent","setFileContent","Date","date","setDate","number","setNumber","scale","setScale","setShowFile","x","setX","y","setY","setBytes","pdfBytes","setpdfBytes","ramkaBytes","setRamkaBytes","useEffect","prepareRamka","handleFileRead","e","content","result","console","log","a","fetch","ramka","then","res","arrayBuffer","pngImageBytes","PDFDocument","create","imgpdf","embedPng","pngImage","addPage","width","height","pngDims","embedFont","StandardFonts","HelveticaBold","helveticaFont","pages","getPages","firstPage","drawImage","drawText","toLocaleDateString","size","font","color","rgb","save","modifyPdf","load","pdfDocContent","pdfDoc","copyPages","ramkapage","contentPage","embedPage","embeddedPageRamka","embeddedPageContent","embeddedPageRamkaDims","embeddedPageContentDims","page","drawPage","getWidth","getHeight","className","onClick","onChange","event","target","files","FileReader","onloadend","readAsArrayBuffer","accept","multiple","defaultValue","Number","value","moment","format","newDate","handleDateChange","toString","asyncForEach","array","callback","index","length","PDFMergeView","setFiles","setResult","arr","filess","push","prepareMergedPDF","f","pdf","setRotation","degrees","fileArray","Array","from","forEach","file","onload","handleChange","map","key","Nav","history","useHistory","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.93bedf4a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ramka.3144896e.png\";","\nimport React from 'react';\n\nexport const FileDisplay = (props) => {\n    //useCallback na bytes\n    const ramkaBlob = new Blob([props.bytes], { type: \"application/pdf\" });\n    const ramkaBlobUrl = URL.createObjectURL(ramkaBlob);\n    return (\n        <iframe src={ramkaBlobUrl}></iframe>\n    )\n}","import React, { useState, useEffect } from \"react\";\nimport ramka from \"../ramka.png\";\nimport * as moment from \"moment\";\nimport { PDFDocument, rgb, StandardFonts } from \"pdf-lib\";\n\nimport { FileDisplay } from \"../components/FileDisplay/FileDisplay\";\n\nfunction InsertIntoPDFView() {\n  const [fileContent, setFileContent] = useState(\"\");\n  // const [fileContent, setFileContent] = useState([]); //multi pdf laczenie\n\n  const [date, setDate] = useState(new Date());\n  const [number, setNumber] = useState(\"P.1425.2020.\");\n    const [scale, setScale] = useState(0.7);\n    const [showFile, setShowFile] = useState(false);\n\n\n  const [x, setX] = useState(20);\n  const [y, setY] = useState(20);\n\n  const [bytes, setBytes] = useState(null);\n\n  const [pdfBytes, setpdfBytes] = useState(null);\n\n  const [ramkaBytes, setRamkaBytes] = useState(null);\n\n  useEffect(() => {\n    prepareRamka();\n  }, [number, date]);\n\n  let fileReader;\n\n  const handleFileRead = (e) => {\n    const content = fileReader.result;\n    console.log(content);\n    setFileContent(content);\n  };\n\n  const handleChange = (content) => {\n    fileReader = new FileReader();\n    fileReader.onloadend = handleFileRead;\n    fileReader.readAsArrayBuffer(content);\n    console.log(fileReader, fileReader.result, fileContent);\n  };\n\n  const prepareRamka = async () => {\n    const pngImageBytes = await fetch(ramka).then((res) => res.arrayBuffer());\n\n    const imgpdf = await PDFDocument.create();\n    const pngImage = await imgpdf.embedPng(pngImageBytes);\n    imgpdf.addPage([pngImage.width, pngImage.height]);\n\n    const pngDims = pngImage.scale(1); // wielkosc ramki\n    const helveticaFont = await imgpdf.embedFont(StandardFonts.HelveticaBold);\n\n    const pages = imgpdf.getPages();\n    const firstPage = pages[0];\n\n    firstPage.drawImage(pngImage, {\n      x: 0,\n      y: 0,\n      width: pngDims.width,\n      height: pngDims.height,\n    });\n\n    // data\n    firstPage.drawText(date.toLocaleDateString(), {\n      x: 200,\n      y: 100,\n      size: 10,\n      font: helveticaFont,\n      color: rgb(0.95, 0.1, 0.1),\n    });\n\n    //numerek\n    firstPage.drawText(number, {\n      x: 200,\n      y: 125,\n      size: 12,\n      font: helveticaFont,\n      color: rgb(0.95, 0.1, 0.1),\n    });\n\n    let ramkaBytes = await imgpdf.save();\n    setRamkaBytes(ramkaBytes);\n    return imgpdf;\n  };\n  async function modifyPdf() {\n    let imgpdf = await prepareRamka();\n\n    const pdfDocContent = await PDFDocument.load(fileContent);\n\n    const pdfDoc = await PDFDocument.create();\n\n    let [ramkapage] = await pdfDoc.copyPages(imgpdf, [0]);\n    let [contentPage] = await pdfDoc.copyPages(pdfDocContent, [0]);\n\n    let embeddedPageRamka = await pdfDoc.embedPage(ramkapage);\n    let embeddedPageContent = await pdfDoc.embedPage(contentPage);\n\n    const embeddedPageRamkaDims = embeddedPageRamka.scale(scale);\n    const embeddedPageContentDims = embeddedPageContent.scale(1);\n\n    const page = pdfDoc.addPage([\n      embeddedPageContentDims.width,\n      embeddedPageContentDims.height,\n    ]);\n    page.drawPage(embeddedPageRamka, {\n      ...embeddedPageRamkaDims,\n      x: page.getWidth() - embeddedPageRamkaDims.width - x,\n      y: page.getHeight() - embeddedPageRamkaDims.height - y,\n    });\n\n    page.drawPage(embeddedPageContent, {\n      ...embeddedPageContentDims,\n      x: 0,\n      y: 0,\n    });\n\n    const pdfBytes = await pdfDoc.save();\n    setBytes(pdfBytes);\n    setpdfBytes(pdfBytes);\n    setShowFile(true);\n  }\n\n  const handleDateChange = (value) => {\n    let newDate = new Date(value);\n    setDate(newDate);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {fileContent && (\n          <button type=\"submit\" onClick={async () => await modifyPdf()}>\n            RUN\n          </button>\n        )}\n\n        <div className=\"row\">\n          <div className=\"column\">\n            <div>\n              <label>plik pdf: </label>\n              <input\n                type=\"file\"\n                onChange={(event) => handleChange(event.target.files[0])}\n                accept=\".pdf\"\n                multiple={true}\n              ></input>\n            </div>\n\n            <div>\n              <label>skala czerownej ramki: </label>\n              <input\n                type=\"number\"\n                defaultValue={scale}\n                onChange={(event) => setScale(Number(event.target.value))}\n              />\n            </div>\n            <div>\n              <label>x: </label>\n              <input\n                type=\"number\"\n                defaultValue={x}\n                onChange={async (event) => setX(Number(event.target.value))}\n              />\n            </div>\n            <div>\n              <label>y: </label>\n              <input\n                type=\"number\"\n                defaultValue={y}\n                onChange={(event) => setY(Number(event.target.value))}\n              />\n            </div>\n          </div>\n          <div className=\"column\">\n            <div>\n              <label>numer roboty: </label>\n              <input\n                type=\"text\"\n                defaultValue={number}\n                onChange={(event) => setNumber(event.target.value)}\n              />\n            </div>\n\n            <div>\n              <label>data: </label>\n              <input\n                type=\"date\"\n                defaultValue={moment(date).format(\"YYYY-MM-DD\")}\n                onChange={(event) => {\n                  handleDateChange(event.target.value.toString());\n                }}\n              />\n            </div>\n          </div>\n        </div>\n\n        <div className=\"row\">\n          <div className=\"column-input\">\n            {pdfBytes && <FileDisplay bytes={pdfBytes} />}\n          </div>\n          <div className=\"column-input\">\n            <FileDisplay bytes={ramkaBytes} />\n          </div>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default InsertIntoPDFView;\n","export async function asyncForEach(array, callback) {\n    for (let index = 0; index < array.length; index++) {\n      await callback(array[index], index, array);\n    }\n  }","import React, { useState } from \"react\";\nimport { asyncForEach } from \"../helpers/asyncForEach\";\nimport { PDFDocument, degrees, StandardFonts } from \"pdf-lib\";\nimport { FileDisplay } from \"../components/FileDisplay/FileDisplay\";\n\nfunction PDFMergeView() {\n  const [files, setFiles] = useState([]);\n  const [result, setResult] = useState([]);\n\n  let arr = [];\n  let filess = [];\n\n  const handleFileRead = (e) => {\n    const content = e.target.result;\n    arr.push(content);\n    if (arr.length === filess.length) {\n      setFiles(arr);\n    }\n  };\n\n  const handleChange = (files) => {\n    let fileArray = Array.from(files);\n    filess = Array.from(fileArray);\n\n    fileArray.forEach((file) => {\n      let fileReader = new FileReader();\n      fileReader.onload = handleFileRead;\n      fileReader.readAsArrayBuffer(file);\n    });\n  };\n\n  const prepareMergedPDF = async () => {\n    console.log(\"bytes\", files);\n    const pdfDoc = await PDFDocument.create();\n\n    await asyncForEach(files, async (f) => {\n      let pdf = await PDFDocument.load(f);\n      let [contentPage] = await pdfDoc.copyPages(pdf, [0]);\n      let embeddedPageContent = await pdfDoc.embedPage(contentPage);\n      const page = pdfDoc.addPage([\n        embeddedPageContent.width,\n        embeddedPageContent.height,\n      ]);\n      page.drawPage(embeddedPageContent, {\n        height: embeddedPageContent.height,\n        width: embeddedPageContent.width,\n        x: 1,\n        y: 1,\n      });\n\n      if (page.getWidth() > page.getHeight()) {\n        page.setRotation(degrees(90));\n      }\n    });\n\n    const pdfBytes = await pdfDoc.save();\n    setResult(pdfBytes);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {files.length > 0 && <button type=\"submit\" onClick={async () => await prepareMergedPDF()}>\n          RUN\n        </button>}\n\n        <div className=\"row\">\n          {result.length > 0 && <FileDisplay bytes={result} />}\n          <div className=\"column\">\n            <div>\n              <label> plik pdf: </label>\n              <input\n                type=\"file\"\n                onChange={(event) => handleChange(event.target.files)}\n                accept=\".pdf\"\n                multiple={true}\n              ></input>\n            </div>\n            {files.map((f, index) => (\n              <FileDisplay key={index} bytes={f} />\n            ))}\n          </div>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default PDFMergeView;\n","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nexport const Nav = () => {\n  let history = useHistory();\n  return (\n    <>\n      <button onClick={() => history.push(\"/pdfHelper/\")}>Dodaj pieczątke</button>\n      <button onClick={() => history.push(\"/pdfHelper/merge\")}>połącz pliki</button>\n    </>\n  );\n};\n","import React from \"react\";\nimport InsertIntoPDFView from './view/InsertIntoPDFView';\nimport PDFMergeView from './view/PDFMergeView';\nimport { Switch,BrowserRouter, Route } from 'react-router-dom';\nimport { Nav } from './components/Nav/Nav';\nimport './App.css';\n\n\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Nav/>\n      <Switch>\n        <Route path=\"/pdfHelper/\" exact={true} component={InsertIntoPDFView} />\n        <Route path=\"/pdfHelper/merge\" exact={true} component={PDFMergeView} />\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}